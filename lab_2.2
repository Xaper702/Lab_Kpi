#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <conio.h>

//---------------------------------------------- 1 прототипи функцій (сигнатури) -------------------------------------------------------------

double f(double x);

//double(тип значення, що повертає) rectangle_method (назва функції)  (double a, double b, int intervals)-(список параметрів);

double rectangle_method(double a, double b, int intervals);
double trapezoid_method(double a, double b, int intervals);
double interval_method(double a, double b, int intervals);



int main()
    {
    double a, b;                // Нижня та верхня межі інтегрування
    int method, intervals, N;
    double epsilon = 0.00001;
    double I1, I2, delta;

    printf("Enter the lower limit of integration: ");
    scanf("%lf", &a);

    printf("Enter the upper limit of integration: ");
    scanf("%lf", &b);

    printf("Choose integration method:\n");
    printf("1. Rectangle Method\n");
    printf("2. Trapezoid Method\n");
    printf("3. Parabola Method\n");
    printf("Enter the number of the desired method: ");
    scanf("%d", &method);

    printf("Enter the number of intervals: ");
    scanf("%d", &intervals);


    double result;

    switch (method)
    {
        case 1:
            result = rectangle_method(a, b, intervals);    // виклик функції rectangle_method
            printf("Result using Rectangle Method: %lf\n", result);

                I1 = rectangle_method(a, b, intervals);
                N = intervals;
                intervals += 2;
                I2 = rectangle_method(a, b, intervals);
                delta = fabs(I1 - I2);

                while (delta > epsilon)
                    {
                    I1 = I2;
                    N = intervals;
                    intervals += 2;
                    I2 = rectangle_method(a, b, intervals);
                    delta = fabs(I1 - I2);
                    }
                    printf("Additional Result: %lf\n", I2);
            break;

        case 2:
            result = trapezoid_method(a, b, intervals);
            printf("Result using Trapezoid Method: %lf\n", result);

                I1 = trapezoid_method(a, b, intervals);
                N = intervals;
                intervals += 2;
                I2 = trapezoid_method(a, b, intervals);
                delta = fabs(I1 - I2);

                while (delta > epsilon)
                    {
                    I1 = I2;
                    N = intervals;
                    intervals += 2;
                    I2 = trapezoid_method(a, b, intervals);
                    delta = fabs(I1 - I2);
                    }
                    printf("Additional Result: %lf\n", I2);
            break;

        case 3:
            result = interval_method(a, b, intervals);
            printf("Result using Interval Method: %lf\n", result);

                I1 = interval_method(a, b, intervals);
                N = intervals;
                intervals += 2;
                I2 = interval_method(a, b, intervals);
                delta = fabs(I1 - I2);

                while (delta > epsilon)
                    {
                    I1 = I2;
                    N = intervals;
                    intervals += 2;
                    I2 = interval_method(a, b, intervals);
                    delta = fabs(I1 - I2);
                    }
                    printf("Additional Result: %lf\n", I2);
            break;

        default:
            printf("Invalid method choice.\n");
            return 1;
    }



    return 0;
}
//------------------------------------------------------------------- 2 реалізація функцій---------------------------------------------------------------------

//реалізація підінтегральної функції
double f(double x)
{
    return x * pow(sin(x), 2);
}

//реалізація методу прямокутників
double rectangle_method(double a, double b, int intervals)
{
    double h = (b - a) / intervals, result = 0.0, x;
    for (int i = 0; i < intervals; i++)
        {
        x = a + i * h;
        result += h * f(x);
        }
    return result;
}

//реалізаія методу трапецій
double trapezoid_method(double a, double b, int intervals)
{
    double h = (b - a) / intervals, result = 0.0, x;
    for (int i = 0; i < intervals; i++)
        {
        x = a + i * h;
        result += h * (f(x) + f(x + h)) / 2;
        }
    return result;
}

//реалізація методу інтервалів
double interval_method(double a, double b, int intervals)
{
    double h = (b - a) / intervals;
    double result = 0.0;

    for (int i = 0; i < intervals; i++)
        {
        double x1 = a + i * h;
        double x2 = a + (i + 1) * h;
        double mid = (x1 + x2) / 2.0;
        result += f(mid) * h;
        }

    return result;
}

